# This is a Makefile version of the buildenv script. The latter has now
# been deprecated.
#
.foo.done=${BUILDROOT}/.foo.done
.check-env.done=${BUILDROOT}/.check-env.done
.check-files.done=${BUILDROOT}/.check-files.done
.make-dirs.done=${BUILDROOT}/.make-dirs.done
.copy-files.done=${BUILDROOT}/.copy-files.done
.llvm.done=${BUILDROOT}/.llvm.done
.cython.done=${BUILDROOT}/.cython.done
.shrapnel.done=${BUILDROOT}/.shrapnel.done

# GNUMakefile
#_R= ${shell pwd}
#_R!=pwd
_R=${BUILDROOT}
uname_s=${shell uname -s | sed 'y/QWERTYUIOPASDFGHJKLZXCVBNM/qwertyuiopasdfghjklzxcvbnm/'}
uname_p=${shell uname -p}
pythonver=${shell python -V 2>&1 | sed -E 's/Python ([^.]+)\.([^.]+)\.(.+)/\1\2/'}
pythonprefix=py${pythonver}-


all: print-env

clean-all: check-env clean-foo clean-check-env clean-check-files clean-make-dirs clean-copy-files clean-llvm clean-cython clean-shrapnel

clean: clean-all

${.foo.done}:
	@echo foo ...
	@touch ${.foo.done}

foo: ${.foo.done}

clean-foo:
	@rm -f ${.foo.done}


_check-buildroot:
	@test "`echo "${BUILDROOT}" | sed 's/^\(.\).*/\1/'`" = '/'
	@test -d "${BUILDROOT}"

${.check-env.done}:
	@echo checking env ...
	@which git
	@which fakeroot
	@which dpkg-deb
	@which python
	@test -x ${BUILDROOT}/bin/make-deb
	@test "`echo "${BUILDROOT}" | sed 's/^\(.\).*/\1/'`" = '/'
	@test -d "${BUILDROOT}"
	@test -d "${PREFIX}"
	@test -n "${EQ_DEV_CYTHONVER}"
	@test -n "${EQ_DEV_LLVMVER}"
	@which wget
	@touch ${.check-env.done}

check-env: ${.check-env.done}

clean-check-env: _check-buildroot
	@rm -f ${.check-env.done}


${.check-files.done}: ${.check-env.done}
	@echo checking files ...
	@for i in ${_R}/geo.db \
	    ${_R}/cds_ips.dat \
	    $${GIT_SSH} \
	    $${EQ_DEV_HGKEY}; \
	do \
	    if ! test -f $$i; \
	    then \
	        echo "$$i might be needed for you"; \
	    fi; \
	done;

	@touch ${.check-files.done}

check-files: ${.check-files.done}

clean-check-files: _check-buildroot
	@echo cleaning check fiels ...
	@rm -f ${.check-files.done}


${.make-dirs.done}: ${.check-env.done}
	@echo making dirs ...
	@touch ${.make-dirs.done}

make-dirs: ${.make-dirs.done}

clean-make-dirs: _check-buildroot
	@echo cleaning dirs ...
	@rm -f ${.make-dirs.done}


${.copy-files.done}: ${.check-files.done} ${.make-dirs.done}
	@echo copying files ...
	@if test -f ${_R}/geo.db; then cp ${_R}/geo.db ${PREFIX}/etc/; else true; fi;
	@if test -f ${_R}/cds_ips.dat; then cp ${_R}/cds_ips.dat ${PREFIX}/etc/; else true; fi;
	@touch ${.copy-files.done}

copy-files: ${.copy-files.done}

clean-copy-files: _check-buildroot
	@echo cleaning files ...
	@rm -f ${.copy-files.done}


# Build time deps, we don't make an rpm out of it for now
${.llvm.done}: ${.make-dirs.done}
	@echo building LLVM ...
	@if ! test -e ${PREFIX}/lib/LLVMHello.so; then rm -Rf ${_R}/llvm && \
	    mkdir -p ${_R}/llvm && \
	    cd ${_R}/llvm && \
	    wget -O- http://llvm.org/releases/${EQ_DEV_LLVMVER}/llvm-${EQ_DEV_LLVMVER}.src.tar.gz  | tar -xz -f- && \
	    cd llvm-${EQ_DEV_LLVMVER}.src && \
	    ./configure --prefix=${PREFIX} --enable-optimized=yes --enable-assertions=no && \
	    ${MAKE} all install; else echo '... already installed'; fi;
	@touch ${.llvm.done}

llvm: ${.llvm.done}

clean-llvm: _check-buildroot
	@echo cleaning LLVM ...
	@rm -Rf ${_R}/llvm
	@rm -f ${.llvm.done}


# Build time deps, we don't make an rpm out of it for now
${.cython.done}: ${.make-dirs.done}
	@echo installing Cython ...
	@if ! test -e ${_R}/bin/cython; then rm -Rf ${_R}/cython && \
	    mkdir ${_R}/cython && \
	    cd ${_R}/cython && \
	    rm -f Cython-${EQ_DEV_CYTHONVER}.tar.gz && \
	    wget --no-check-certificate http://pypi.python.org/packages/source/C/Cython/Cython-${EQ_DEV_CYTHONVER}.tar.gz && \
	    tar -xz -f Cython-${EQ_DEV_CYTHONVER}.tar.gz && \
	    cd Cython-${EQ_DEV_CYTHONVER} && \
	    . ${_R}/bin/activate && python setup.py install; else echo "... already installed"; fi;
	@touch ${.cython.done}

cython: ${.cython.done}

clean-cython: _check-buildroot
	@echo cleaning Cython ...
	@rm -Rf ${_R}/cython
	@rm -f ${.cython.done}


# Build time deps
${.shrapnel.done}: ${.cython.done} ${.llvm.done}
	@echo building shrapnel ...
	D=${_R}/shrapnel/stage/DEBIAN && \
	mkdir -p $$D && \
	( cd ${_R}/shrapnel && \
	    ( rm -Rf build && . ${_R}/bin/activate && python setup.py build ) && \
	    ( rm -Rf dist && python setup.py bdist ) && \
	    tar -xz -f dist/coro-*.${uname_s}-${uname_p}.tar.gz -C stage ) && \
	V=`cd ${_R}/shrapnel/dist && ls coro-*.${uname_s}-${uname_p}.tar.gz` && \
	V=$${V#coro-} && \
	V=$${V%.${uname_s}-${uname_p}.tar.gz} && \
	MAKEDEB_DEBIAN=$$D /bin/sh ${BUILDROOT}/bin/make-deb coro $${V} ${pythonprefix}
	@touch ${.shrapnel.done}

shrapnel: ${.shrapnel.done}

clean-shrapnel: _check-buildroot
	@echo cleaning shrapnel ...
	@rm -Rf ${_R}/shrapnel*
	@rm -f ${.shrapnel.done}


print-env: _check-buildroot
	@echo env GIT_SSH=${GIT_SSH}
	@env | grep EQ_ | sort


help:
	@echo
	@echo "Usage: BUILDROOT=<abspath> ${MAKE}" [ target ... ]
	@echo
	@echo "	useful targets:"
	@echo "		print-env"
	@echo "		copy-files, clean-copy-files"
	@echo "		cython, clean-cython"
	@echo "		llvm, clean-llvm"
	@echo "		shrapnel, clean-shrapnel"
	@echo "		all, clean-all, clean"
